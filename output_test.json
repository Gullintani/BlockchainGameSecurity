{
    "error": null, 
    "issues": 
    [
        {"address": 3869, 
            "contract": "0x06012c8cf97BEaD5deAe237070F9587f8E7A266d", 
            "debug": "{\n    \"1\": {\n        \"calldata\": \"0x1940a93605\",\n        \"call_value\": \"0x0\",\n        \"caller\": \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\"\n    }\n}", 
            "description": "A reachable exception has been detected.\nIt is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.", 
            "function": "isPregnant(uint256)", 
            "max_gas_used": 1259, 
            "min_gas_used": 834, 
            "severity": "Low", 
            "sourceMap": 3869, 
            "swc-id": "110", 
            "title": "Exception State"},
             
        {"address": 12236, 
            "contract": "0x06012c8cf97BEaD5deAe237070F9587f8E7A266d", 
            "debug": "{\n    \"1\": {\n        \"calldata\": \"0x0560ff44\",\n        \"call_value\": \"0x0\",\n        \"caller\": \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\"\n    }\n}", 
            "description": "The binary addition can overflow.\nThe operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.", 
            "function": "tokenMetadata(uint256,string)", 
            "max_gas_used": 1351, 
            "min_gas_used": 360, 
            "severity": "High", 
            "sourceMap": 12236, 
            "swc-id": "101", 
            "title": "Integer Overflow"}
    ], 
    "success": true}
